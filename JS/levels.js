//Create borders
function levelOne() {

    //Ceiling
    for (let i = 0; i < 40; i++) {
        borders.push(new Border(0 + 32 * i, 0, 32, 32, 1));
    }

    //Left Wall
    for (let i = 0; i < 22; i++) {
        borders.push(new Border(0, 32 + 32 * i, 32, 32, 1));
    }

    //Right Wall
    for (let i = 0; i < 22; i++) {
        borders.push(new Border(1248, 32 + 32 * i, 32, 32, 1));
    }

    //Bottom Platforms
    for (let i = 0; i < 8; i++) {
        borders.push(new Border(32 + 32 * i, 704, 32, 32, 1));
    }

    for (let i = 0; i < 7; i++) {
        borders.push(new Border(32 * 10 + 32 * i, 704, 32, 32, 1));
    }

    for (let i = 0; i < 8; i++) {
        borders.push(new Border(32 * 18 + 32 * i, 704, 32, 32, 1));
    }

    for (let i = 0; i < 6; i++) {
        borders.push(new Border(32 * 27 + 32 * i, 704, 32, 32, 1));
    }

    //Spiral
    for (let i = 0; i < 5; i++) {
        borders.push(new Border(32 + 32 * i, 576, 32, 32, 1));
    }

    for (let i = 0; i < 20; i++) {
        borders.push(new Border(32 * 8 + 32 * i, 576, 32, 32, 1));
    }

    for (let i = 0; i < 14; i++) {
        borders.push(new Border(1056, 128 + 32 * i, 32, 32, 1));
    }

    for (let i = 0; i < 29; i++) {
        borders.push(new Border(128 + 32 * i, 128, 32, 32, 1));
    }

    for (let i = 0; i < 10; i++) {
        borders.push(new Border(192, 160 + + 32 * i, 32, 32, 1));
    }

    for (let i = 0; i < 6; i++) {
        borders.push(new Border(224 + 32 * i, 448, 32, 32, 1));
    }

    for (let i = 0; i < 6; i++) {
        borders.push(new Border(480 + 32 * i, 448, 32, 32, 1));
    }

    for (let i = 0; i < 7; i++) {
        borders.push(new Border(832, 256 + 32 * i, 32, 32, 1));
    }

    for (let i = 0; i < 12; i++) {
        borders.push(new Border(448 + 32 * i, 256, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(416, 256 + + 32 * i, 32, 32, 1));
    }

    //Platforms on Right
    for (let i = 0; i < 4; i++) {
        borders.push(new Border(32 * 34 + 32 * i, 672, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 37 + 32 * i, 608, 32, 32, 1));
    }

    for (let i = 0; i < 2; i++) {
        borders.push(new Border(32 * 34 + 32 * i, 544, 32, 32, 1));
    }

    for (let i = 0; i < 1; i++) {
        borders.push(new Border(32 * 34 + 32 * i, 480, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 36 + 32 * i, 416, 32, 32, 1));
    }

    for (let i = 0; i < 2; i++) {
        borders.push(new Border(32 * 37 + 32 * i, 352, 32, 32, 1));
    }
    for (let i = 0; i < 1; i++) {
        borders.push(new Border(32 * 38 + 32 * i, 288, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 34 + 32 * i, 224, 32, 32, 1));
    }

    for (let i = 0; i < 1; i++) {
        borders.push(new Border(32 * 34 + 32 * i, 160, 32, 32, 1));
    }

    //Platforms on Left
    for (let i = 0; i < 4; i++) {
        borders.push(new Border(32 + 32 * i, 256, 32, 32, 1));
    }

    for (let i = 0; i < 2; i++) {
        borders.push(new Border(32 * 4 + 32 * i, 352, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 + 32 * i, 448, 32, 32, 1));
    }

    //Platforms second from the right
    for (let i = 0; i < 4; i++) {
        borders.push(new Border(32 * 29 + 32 * i, 512, 32, 32, 1));
    }

    for (let i = 0; i < 2; i++) {
        borders.push(new Border(32 * 31 + 32 * i, 448, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 27 + 32 * i, 384, 32, 32, 1));
    }

    for (let i = 0; i < 1; i++) {
        borders.push(new Border(32 * 27 + 32 * i, 320, 32, 32, 1));
    }

    //Platforms Second from Left
    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 10 + 32 * i, 256, 32, 32, 1));
    }

    for (let i = 0; i < 3; i++) {
        borders.push(new Border(32 * 7 + 32 * i, 320, 32, 32, 1));
    }

    //Center
    borders.push(new Border(32 * 21, 384, 160, 96, 1));

    //goal at the end of the level
    goal.push(new Goal(32 * 25, 376, 32, 3));

    enemy.push(new Enemy(200, 96, 1.1, 32, 32, 50));
    enemy.push(new Enemy(500, 96, -1.3, 32, 32, 50));
    enemy.push(new Enemy(800, 96, 1.4, 32, 32, 50));
    enemy.push(new Enemy(575, 224, -2, 32, 32, 150));
    enemy.push(new Enemy(550, 416, 3, 32, 32, 50));
    enemy.push(new Enemy(500, 544, -2, 32, 32, 150));
    enemy.push(new Enemy(668, 672, -1, 32, 32, 50));


    //Tile System for Level 1
    gameMap = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 0, 0, -1, -1, 1,
        1, 0, 0, 0, 0, -1, 1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 0, 1,
        1, -1, -1, -1, -1, -1, 1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 0, 0, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0, 0, 0, 1,
        1, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 0, 0, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 0, -1, -1, -1, 1,
        1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 1,
    ];

    requestAnimationFrame(draw);
}

function levelTwo() {

    //Left Wall
    for (let i = 0; i < 23; i++) {
        borders.push(new Border(0, 32 * 3 + 32 * i, 32, 32, 1));
    }

    //Right Wall
    for (let i = 0; i < 23; i++) {
        borders.push(new Border(1248, 32 * 6 + 32 * i, 32, 32, 1));
    }

    //1st bottom row
    borders.push(new Border(32, 32 * 22, 32 * 4, 32, 1));
    borders.push(new Border(32 * 6, 32 * 21, 32 * 5, 32, 1));
    borders.push(new Border(32 * 13, 32 * 21, 32 * 6, 32, 1));
    borders.push(new Border(32 * 21, 32 * 20, 32 * 6, 32, 1));
    borders.push(new Border(32 * 30, 32 * 22, 32 * 7, 32, 1));
    borders.push(new Border(32 * 36, 32 * 20, 32 * 3, 32, 1));

    //2nd bottom row
    borders.push(new Border(32 * 32, 32 * 18, 32 * 4, 32, 1));
    borders.push(new Border(32 * 27, 32 * 16, 32 * 4, 32, 1));
    borders.push(new Border(32 * 19, 32 * 16, 32 * 6, 32, 1));
    borders.push(new Border(32 * 12, 32 * 15, 32 * 5, 32, 1));
    borders.push(new Border(32 * 6, 32 * 15, 32 * 4, 32, 1));
    borders.push(new Border(32 * 3, 32 * 14, 32 * 2, 32, 1));

    //2nd row from top
    borders.push(new Border(32, 32 * 12, 32 * 2, 32, 1));
    borders.push(new Border(32 * 5, 32 * 10, 32 * 2, 32, 1));
    borders.push(new Border(32 * 9, 32 * 9, 32 * 2, 32, 1));
    borders.push(new Border(32 * 13, 32 * 9, 32 * 3, 32, 1));
    borders.push(new Border(32 * 18, 32 * 11, 32 * 6, 32, 1));
    borders.push(new Border(32 * 27, 32 * 11, 32 * 5, 32, 1));
    borders.push(new Border(32 * 33, 32 * 10, 32 * 2, 32, 1));
    borders.push(new Border(32 * 37, 32 * 8, 32, 32, 1));

    //1st row from top
    borders.push(new Border(32 * 38, 32 * 6, 32, 32, 1));
    borders.push(new Border(32 * 36, 32 * 4, 32, 32, 1));
    borders.push(new Border(32 * 31, 32 * 5, 32 * 2, 32, 1));
    borders.push(new Border(32 * 25, 32 * 5, 32 * 4, 32, 1));
    borders.push(new Border(32 * 19, 32 * 5, 32 * 3, 32, 1));
    borders.push(new Border(32 * 15, 32 * 4, 32 * 2, 32, 1));
    borders.push(new Border(32 * 11, 32 * 4, 32, 32, 1));
    borders.push(new Border(32 * 6, 32 * 5, 32, 32, 1));
    borders.push(new Border(32, 32 * 3, 32 * 4, 32, 1));

    //goal
    goal.push(new Goal(0, 88, 32, 3));

    gameMap = [
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1,
        1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 1,
        1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 1,
        1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1,

    ];

    requestAnimationFrame(draw);
}


//levels for the tutorials
function TutorialOne() {

    //left, top, right walls
    borders.push(new Border(0, 0, 32, 736, 1));
    borders.push(new Border(32, 0, 1216, 32, 1));
    borders.push(new Border(1248, 0, 32, 736, 1));

    //bottom platforms
    borders.push(new Border(32, 704, 192, 32, 1));
    borders.push(new Border(288, 704, 192, 32, 1));
    borders.push(new Border(512, 704, 192, 32, 1));
    borders.push(new Border(736, 704, 192, 32, 1));
    borders.push(new Border(992, 704, 256, 32, 1));
    goal.push(new Goal(1216, 696, 32, 2));

    //Tiling Map for Level One in Tutorial
    gameMap = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1,
        1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1,

    ];

    requestAnimationFrame(draw);

}

function TutorialTwo() {

    //left, top, right walls
    borders.push(new Border(0, 0, 32, 736, 1));
    borders.push(new Border(32, 0, 1216, 32, 1));
    borders.push(new Border(1248, 0, 32, 736, 1));

    //Bottom platform
    borders.push(new Border(32, 704, 192, 32, 1));

    //Middle Platform
    borders.push(new Border(256, 640, 832, 32, 1));

    //Bottom PLatform
    borders.push(new Border(1120, 704, 128, 32, 1));

    //Goal
    goal.push(new Goal(1216, 696, 32, 2));

    //Enemy
    enemy.push(new Enemy(500, 608, 1, 32, 32, 100));
    enemy.push(new Enemy(800, 608, -0.8, 32, 32, 100));

    //GameMap for Second Level in Tutorial
    gameMap = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1,
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1,
        1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1
    ];

    //Drawing tiling Map
    requestAnimationFrame(draw);
}

//Constants
tileW = 32;
tileH = 32;
mapW = 40;
mapH = 23;

//puts images on canvas based on specific tiling maps
function draw() {
    //creates variables with images
    var grass = new Image();
    grass.src = 'images\\grass_block.png';
    var dirt = new Image();
    dirt.src = 'images\\dirt_block.png';
    var goal = new Image();
    goal.src = 'images\\podium.png'
    if (ctx == null) {
        return;
    }

    for (let y = 0; y < mapH + 1; y++) {
        for (let x = 0; x < mapW; x++) {
            switch (gameMap[((y * mapW) + x)]) {
                //Places dirt image where there is a one in the tiling map
                case 1:
                    ctx.drawImage(dirt, x * tileW, y * tileH);
                    break;
                //Places grass image where there is a one in the tiling map
                case 0:
                    ctx.drawImage(grass, x * tileH, y * tileW);
                    break;
                //Places goal image where there is a one in the tiling map
                case 3:
                    ctx.drawImage(goal, x * tileH, y * tileW);
            }
        }
    }

    requestAnimationFrame(draw);
}